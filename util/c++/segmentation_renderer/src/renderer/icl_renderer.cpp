#include "icl_renderer.h"
#include "util.h"

ICL_Renderer::ICL_Renderer(string const &pathToMesh) : Renderer(pathToMesh, 640, 480) {   
    // nothing to do here
}

ICL_Renderer::~ICL_Renderer() = default;

void ICL_Renderer::renderTrajectory(ICL_Parser& ip, const std::string save_path){
    
    for(int i=0; i<ip.getNumberofPoseFiles(); i++){
        glm::mat4 extr = ip.getExtrinsics(i);
        glm::mat3 intr = ip.getIntrinsics();

        extr = glm::inverse(extr); // RT goes from view to world, but we need world to view

        /******************************************************** 
         * Here, we fix a scaling issue where the .obj mesh is 
         * shown in a x-flipped orientation (e.g. door left instead of right).
         * Maybe this has to do with the way the .obj file is generated by povray?
        ********************************************************/
        glm::mat4 extr_scale = glm::mat4(1.0f);
        extr_scale = glm::scale(extr_scale, glm::vec3(-1, 1, 1));
        extr = extr * extr_scale;
        
        /* *************************************************************************
            .obj mesh is right-handed system (thumb left, index up, middle front)
            OpenGL is left handed (thumb right, index down, middle front). 
            This converts from .obj to OpenGl coordinate system.
        ***************************************************************************/
        glm::mat4 to_opengl_coords = glm::mat4(1.0f);
        to_opengl_coords = glm::scale(to_opengl_coords, glm::vec3(-1, -1, -1));

        glm::mat4 projection = camera_utils::perspective(intr, ip.getWidth(), ip.getHeight(), kNearPlane, kFarPlane);

        render(extr, to_opengl_coords, projection); // apply RT in model space (povray icl) before applying a coordinate system change to opengl world

        // read image into openCV matrix
        cv::Mat colorImage;
        readRGB(colorImage);
        // cv::imshow("color image", colorImage); 
        // cv::waitKey(0);



        // read depth image into openCV matrix
        cv::Mat depthImage;
        readDepth(depthImage);
        // cv::imshow("depth image", depthImage); 
        // cv::waitKey(0);

        float min = -1;
        float max = -1;

        for(int i=0; i<depthImage.rows; i++){
            for(int j=0; j<depthImage.cols; j++){                
                const float z = depthImage.at<float>(i,j);
                const float zn = (2 * z - 1);
                const float ze = (2 * kFarPlane * kNearPlane) / (kFarPlane + kNearPlane + zn*(kNearPlane - kFarPlane));
                
                depthImage.at<float>(i,j) = ze; // * 255 / kFarPlane

                if(min == -1 || depthImage.at<float>(i,j) < min){
                    min = depthImage.at<float>(i,j);
                }
                if(max == -1 || depthImage.at<float>(i,j) > max){
                    max = depthImage.at<float>(i,j);
                }

                // depthImage.at<float>(i,j) = depthImage.at<float>(i,j) / kFarPlane;
            }
        }

        std::cout << "MIN: " << min << " MAX: " << max << std::endl;

        // cv::imshow("depth image", depthImage); 
        // cv::waitKey(0);

        // save matrix as file
        if (save_path != "") {
            std::stringstream filename;
            char scene_name[30];
            sprintf(scene_name, "scene_%02d_%04d", ip.getSceneNr(), i);
            filename << save_path << "/" << scene_name << ".seg.png";
            cv::imwrite(filename.str(), colorImage);

            // std::stringstream depth_filename;
            // depth_filename << save_path << "/" << scene_name << ".depth.png";
            // cv::imwrite(depth_filename.str(), depthImage);

            // write depth as text 
            std::stringstream depth_filename_text;
            depth_filename_text << save_path << "/" << scene_name << ".gl.depth";
            std::ofstream outfile(depth_filename_text.str());
            for(int i=0; i<depthImage.rows; i++){
                for(int j=0; j<depthImage.cols; j++){                
                    const float z = depthImage.at<float>(i,j);
                    outfile << z << " ";
                }
                outfile << std::endl;
            }
            outfile.close();

            std::cout << "Wrote segmentation of: " << scene_name << std::endl;
        }

        // show image in window
        glfwSwapBuffers(m_window);
    
    }
    
}